// source: proto/rippleapi/rippleapi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.rippleapi.EnumTransactionType', null, global);
goog.exportSymbol('proto.rippleapi.Instructions', null, global);
goog.exportSymbol('proto.rippleapi.RequestPrepareTransaction', null, global);
goog.exportSymbol('proto.rippleapi.RequestSignTransaction', null, global);
goog.exportSymbol('proto.rippleapi.RequestSubmitTransaction', null, global);
goog.exportSymbol('proto.rippleapi.ResponsePrepareTransaction', null, global);
goog.exportSymbol('proto.rippleapi.ResponseSignTransaction', null, global);
goog.exportSymbol('proto.rippleapi.ResponseSubmitTransaction', null, global);
goog.exportSymbol('proto.rippleapi.ResponseWaitValidation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.Instructions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.Instructions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.Instructions.displayName = 'proto.rippleapi.Instructions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.RequestPrepareTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.RequestPrepareTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.RequestPrepareTransaction.displayName = 'proto.rippleapi.RequestPrepareTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.ResponsePrepareTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.ResponsePrepareTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.ResponsePrepareTransaction.displayName = 'proto.rippleapi.ResponsePrepareTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.RequestSignTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.RequestSignTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.RequestSignTransaction.displayName = 'proto.rippleapi.RequestSignTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.ResponseSignTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.ResponseSignTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.ResponseSignTransaction.displayName = 'proto.rippleapi.ResponseSignTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.RequestSubmitTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.RequestSubmitTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.RequestSubmitTransaction.displayName = 'proto.rippleapi.RequestSubmitTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.ResponseSubmitTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.ResponseSubmitTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.ResponseSubmitTransaction.displayName = 'proto.rippleapi.ResponseSubmitTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rippleapi.ResponseWaitValidation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rippleapi.ResponseWaitValidation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rippleapi.ResponseWaitValidation.displayName = 'proto.rippleapi.ResponseWaitValidation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.Instructions.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.Instructions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.Instructions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.Instructions.toObject = function(includeInstance, msg) {
  var f, obj = {
    fee: jspb.Message.getFieldWithDefault(msg, 1, ""),
    maxfee: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxledgerversion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxledgerversionoffset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signerscount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.Instructions}
 */
proto.rippleapi.Instructions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.Instructions;
  return proto.rippleapi.Instructions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.Instructions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.Instructions}
 */
proto.rippleapi.Instructions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxfee(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxledgerversion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxledgerversionoffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignerscount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.Instructions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.Instructions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.Instructions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.Instructions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaxfee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxledgerversion();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxledgerversionoffset();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSignerscount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string fee = 1;
 * @return {string}
 */
proto.rippleapi.Instructions.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.Instructions} returns this
 */
proto.rippleapi.Instructions.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string maxFee = 2;
 * @return {string}
 */
proto.rippleapi.Instructions.prototype.getMaxfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.Instructions} returns this
 */
proto.rippleapi.Instructions.prototype.setMaxfee = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 maxLedgerVersion = 3;
 * @return {number}
 */
proto.rippleapi.Instructions.prototype.getMaxledgerversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rippleapi.Instructions} returns this
 */
proto.rippleapi.Instructions.prototype.setMaxledgerversion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 maxLedgerVersionOffset = 4;
 * @return {number}
 */
proto.rippleapi.Instructions.prototype.getMaxledgerversionoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rippleapi.Instructions} returns this
 */
proto.rippleapi.Instructions.prototype.setMaxledgerversionoffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 sequence = 5;
 * @return {number}
 */
proto.rippleapi.Instructions.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.rippleapi.Instructions} returns this
 */
proto.rippleapi.Instructions.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 signersCount = 6;
 * @return {number}
 */
proto.rippleapi.Instructions.prototype.getSignerscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.rippleapi.Instructions} returns this
 */
proto.rippleapi.Instructions.prototype.setSignerscount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.RequestPrepareTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.RequestPrepareTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.RequestPrepareTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderaccount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    receiveraccount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    instructions: (f = msg.getInstructions()) && proto.rippleapi.Instructions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.RequestPrepareTransaction}
 */
proto.rippleapi.RequestPrepareTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.RequestPrepareTransaction;
  return proto.rippleapi.RequestPrepareTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.RequestPrepareTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.RequestPrepareTransaction}
 */
proto.rippleapi.RequestPrepareTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rippleapi.EnumTransactionType} */ (reader.readEnum());
      msg.setTxType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderaccount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveraccount(value);
      break;
    case 5:
      var value = new proto.rippleapi.Instructions;
      reader.readMessage(value,proto.rippleapi.Instructions.deserializeBinaryFromReader);
      msg.setInstructions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.RequestPrepareTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.RequestPrepareTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.RequestPrepareTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSenderaccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getReceiveraccount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInstructions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rippleapi.Instructions.serializeBinaryToWriter
    );
  }
};


/**
 * optional EnumTransactionType tx_type = 1;
 * @return {!proto.rippleapi.EnumTransactionType}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.getTxType = function() {
  return /** @type {!proto.rippleapi.EnumTransactionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rippleapi.EnumTransactionType} value
 * @return {!proto.rippleapi.RequestPrepareTransaction} returns this
 */
proto.rippleapi.RequestPrepareTransaction.prototype.setTxType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string senderAccount = 2;
 * @return {string}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.getSenderaccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.RequestPrepareTransaction} returns this
 */
proto.rippleapi.RequestPrepareTransaction.prototype.setSenderaccount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double amount = 3;
 * @return {number}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rippleapi.RequestPrepareTransaction} returns this
 */
proto.rippleapi.RequestPrepareTransaction.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string receiverAccount = 4;
 * @return {string}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.getReceiveraccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.RequestPrepareTransaction} returns this
 */
proto.rippleapi.RequestPrepareTransaction.prototype.setReceiveraccount = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Instructions instructions = 5;
 * @return {?proto.rippleapi.Instructions}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.getInstructions = function() {
  return /** @type{?proto.rippleapi.Instructions} */ (
    jspb.Message.getWrapperField(this, proto.rippleapi.Instructions, 5));
};


/**
 * @param {?proto.rippleapi.Instructions|undefined} value
 * @return {!proto.rippleapi.RequestPrepareTransaction} returns this
*/
proto.rippleapi.RequestPrepareTransaction.prototype.setInstructions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rippleapi.RequestPrepareTransaction} returns this
 */
proto.rippleapi.RequestPrepareTransaction.prototype.clearInstructions = function() {
  return this.setInstructions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rippleapi.RequestPrepareTransaction.prototype.hasInstructions = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.ResponsePrepareTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.ResponsePrepareTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.ResponsePrepareTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponsePrepareTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txjson: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instructions: (f = msg.getInstructions()) && proto.rippleapi.Instructions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.ResponsePrepareTransaction}
 */
proto.rippleapi.ResponsePrepareTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.ResponsePrepareTransaction;
  return proto.rippleapi.ResponsePrepareTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.ResponsePrepareTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.ResponsePrepareTransaction}
 */
proto.rippleapi.ResponsePrepareTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxjson(value);
      break;
    case 2:
      var value = new proto.rippleapi.Instructions;
      reader.readMessage(value,proto.rippleapi.Instructions.deserializeBinaryFromReader);
      msg.setInstructions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.ResponsePrepareTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.ResponsePrepareTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.ResponsePrepareTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponsePrepareTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxjson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstructions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rippleapi.Instructions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string txJSON = 1;
 * @return {string}
 */
proto.rippleapi.ResponsePrepareTransaction.prototype.getTxjson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.ResponsePrepareTransaction} returns this
 */
proto.rippleapi.ResponsePrepareTransaction.prototype.setTxjson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Instructions instructions = 2;
 * @return {?proto.rippleapi.Instructions}
 */
proto.rippleapi.ResponsePrepareTransaction.prototype.getInstructions = function() {
  return /** @type{?proto.rippleapi.Instructions} */ (
    jspb.Message.getWrapperField(this, proto.rippleapi.Instructions, 2));
};


/**
 * @param {?proto.rippleapi.Instructions|undefined} value
 * @return {!proto.rippleapi.ResponsePrepareTransaction} returns this
*/
proto.rippleapi.ResponsePrepareTransaction.prototype.setInstructions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rippleapi.ResponsePrepareTransaction} returns this
 */
proto.rippleapi.ResponsePrepareTransaction.prototype.clearInstructions = function() {
  return this.setInstructions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rippleapi.ResponsePrepareTransaction.prototype.hasInstructions = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.RequestSignTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.RequestSignTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.RequestSignTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.RequestSignTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txjson: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secret: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.RequestSignTransaction}
 */
proto.rippleapi.RequestSignTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.RequestSignTransaction;
  return proto.rippleapi.RequestSignTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.RequestSignTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.RequestSignTransaction}
 */
proto.rippleapi.RequestSignTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxjson(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.RequestSignTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.RequestSignTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.RequestSignTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.RequestSignTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxjson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string txJSON = 1;
 * @return {string}
 */
proto.rippleapi.RequestSignTransaction.prototype.getTxjson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.RequestSignTransaction} returns this
 */
proto.rippleapi.RequestSignTransaction.prototype.setTxjson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string secret = 2;
 * @return {string}
 */
proto.rippleapi.RequestSignTransaction.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.RequestSignTransaction} returns this
 */
proto.rippleapi.RequestSignTransaction.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.ResponseSignTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.ResponseSignTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.ResponseSignTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponseSignTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txblob: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.ResponseSignTransaction}
 */
proto.rippleapi.ResponseSignTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.ResponseSignTransaction;
  return proto.rippleapi.ResponseSignTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.ResponseSignTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.ResponseSignTransaction}
 */
proto.rippleapi.ResponseSignTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxblob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.ResponseSignTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.ResponseSignTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.ResponseSignTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponseSignTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxblob();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string txID = 1;
 * @return {string}
 */
proto.rippleapi.ResponseSignTransaction.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.ResponseSignTransaction} returns this
 */
proto.rippleapi.ResponseSignTransaction.prototype.setTxid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string txBlob = 2;
 * @return {string}
 */
proto.rippleapi.ResponseSignTransaction.prototype.getTxblob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.ResponseSignTransaction} returns this
 */
proto.rippleapi.ResponseSignTransaction.prototype.setTxblob = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.RequestSubmitTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.RequestSubmitTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.RequestSubmitTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.RequestSubmitTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txblob: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.RequestSubmitTransaction}
 */
proto.rippleapi.RequestSubmitTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.RequestSubmitTransaction;
  return proto.rippleapi.RequestSubmitTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.RequestSubmitTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.RequestSubmitTransaction}
 */
proto.rippleapi.RequestSubmitTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxblob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.RequestSubmitTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.RequestSubmitTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.RequestSubmitTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.RequestSubmitTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxblob();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string txBlob = 1;
 * @return {string}
 */
proto.rippleapi.RequestSubmitTransaction.prototype.getTxblob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.RequestSubmitTransaction} returns this
 */
proto.rippleapi.RequestSubmitTransaction.prototype.setTxblob = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.ResponseSubmitTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.ResponseSubmitTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.ResponseSubmitTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponseSubmitTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultjsonstring: jspb.Message.getFieldWithDefault(msg, 1, ""),
    earliestledgerversion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.ResponseSubmitTransaction}
 */
proto.rippleapi.ResponseSubmitTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.ResponseSubmitTransaction;
  return proto.rippleapi.ResponseSubmitTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.ResponseSubmitTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.ResponseSubmitTransaction}
 */
proto.rippleapi.ResponseSubmitTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultjsonstring(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEarliestledgerversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.ResponseSubmitTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.ResponseSubmitTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.ResponseSubmitTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponseSubmitTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultjsonstring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEarliestledgerversion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string resultJSONString = 1;
 * @return {string}
 */
proto.rippleapi.ResponseSubmitTransaction.prototype.getResultjsonstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rippleapi.ResponseSubmitTransaction} returns this
 */
proto.rippleapi.ResponseSubmitTransaction.prototype.setResultjsonstring = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 earliestLedgerVersion = 2;
 * @return {number}
 */
proto.rippleapi.ResponseSubmitTransaction.prototype.getEarliestledgerversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rippleapi.ResponseSubmitTransaction} returns this
 */
proto.rippleapi.ResponseSubmitTransaction.prototype.setEarliestledgerversion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rippleapi.ResponseWaitValidation.prototype.toObject = function(opt_includeInstance) {
  return proto.rippleapi.ResponseWaitValidation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rippleapi.ResponseWaitValidation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponseWaitValidation.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerversion: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rippleapi.ResponseWaitValidation}
 */
proto.rippleapi.ResponseWaitValidation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rippleapi.ResponseWaitValidation;
  return proto.rippleapi.ResponseWaitValidation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rippleapi.ResponseWaitValidation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rippleapi.ResponseWaitValidation}
 */
proto.rippleapi.ResponseWaitValidation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rippleapi.ResponseWaitValidation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rippleapi.ResponseWaitValidation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rippleapi.ResponseWaitValidation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rippleapi.ResponseWaitValidation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerversion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ledgerVersion = 1;
 * @return {number}
 */
proto.rippleapi.ResponseWaitValidation.prototype.getLedgerversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rippleapi.ResponseWaitValidation} returns this
 */
proto.rippleapi.ResponseWaitValidation.prototype.setLedgerversion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.rippleapi.EnumTransactionType = {
  TX_ACCOUNT_SET: 0,
  TX_ACCOUNT_DELETE: 1,
  TX_CHECK_CANCEL: 2,
  TX_CHECK_CASH: 3,
  TX_CHECK_CREATE: 4,
  TX_DEPOSIT_PREAUTH: 5,
  TX_ESCROW_CANCEL: 6,
  TX_ESCROW_CREATE: 7,
  TX_ESCROW_FINISH: 8,
  TX_OFFER_CANCEL: 9,
  TX_OFFER_CREATE: 10,
  TX_PAYMENT: 11,
  TX_PAYMENT_CHANNEL_CLAIM: 12,
  TX_PAYMENT_CHANNEL_CREATE: 13,
  TX_PAYMENT_CHANNEL_FUND: 14,
  TX_SET_REGULAR_KEY: 15,
  TX_SINGER_LIST_SET: 16,
  TX_TRUST_SET: 17
};

goog.object.extend(exports, proto.rippleapi);
